<?php
/**
 * @file
 *   Allows views to be embedded in webforms and used as submission data sources.
 *
 *
 * This does NOT save all that data in a fully webform-compatible way for
 * reports, it just allows elements that were added on the fly to be processed
 * as data for emails. Data is not available for later reporting.
 *
 * USAGE.
 *
 * Add a field 'can order' as a boolean flag on nodes that can be ordered.
 *
 * Set its 'display' to be 'webform placeholder'
 *
 * Make a view for the nodes you want to show on a webform.
 * This view should display the 'webform placeholder' field.
 *
 * Edit the webform and add this view as a webform field.
 *
 * The placeholder on each node in the view will be replaced with a webform
 * submission field.
 *
 */

/**
 * Declare our new component type for webform - an embedded view.
 *
 * Implements hook_webform_component_info().
 */
function webform_view_webform_component_info() {
  $component_info = array(
    'view' => array(
      'label' => t('Embedded view'),
      'description' => t('Allows a view to be embedded and each row in the view to be a selectable option.'),
      'file' => 'webform_view.inc',
      'features' => array(
        'default_value' => FALSE,
        // Support nested fields here
        'group' => TRUE,
      ),
    ),
  );

  return $component_info;
}

/**
 * Declare our custom theme - used to catch the rendering of an embedded view at the end.
 *
 * hook_theme()
 */
function webform_view_theme() {
  return array(
    'webform_view_embedded' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Return help text describing this module
 *
 * @param $section string Context this help is being called from
 * @return string
 */
function webform_view_help($path, $arg) {
  $modulename = 'webform_view';
  switch ($path) {
    case 'admin/help#' . $modulename:
      $help_dir = drupal_get_path('module', $modulename) . '/help';
      $text = file_get_contents("$help_dir/index.html");
      $text = preg_replace('/(src|href)="([^\\/][^"]+)"/', '$1="' . url($help_dir) . '/$2"', $text);
      return $text;
  }
  return FALSE;
}


/**
 * hook_form_alter()
 *
 */
function webform_view_form_alter(&$form, $form_state, $form_id) {
  if (substr($form_id, 0, 19) != 'webform_client_form') {
    return;
  }
  // Find form_key from cid.
  $form_key = array();
  $settings = variable_get('webform_view_' . $form['#node']->nid, array());
  foreach ($settings as $cid => $enabled) {
    if (is_int($cid) && $enabled) {
      $form_key[] = 'webform-component-' . $form['#node']->webform['components'][$cid]['form_key'];
    }
  }

  #dpm(get_defined_vars());

}

/**
 * By declaring an alternative field formatter - to be used in place of the
 * 'can order' flag, we can insert form elements into the view display
 * and therefore into the webform.
 *
 * Field used on the content type must be a Boolean.
 * If so, then we can replace that item with a custom display renderer.
 */
function webform_view_field_formatter_info() {
  return array(
    'webform_view_placeholder' => array(
      'label' => t('A webform placeholder'),
      'field types' => array('list_boolean'),
    ),
  );
}

/**
 * Insert a PLACEHOLDER value as the text rendering of an item.
 * The webform postprocess should replace this placeholder with the form element
 * @see theme_webform_view_embedded()
 *
 * Implements hook_field_formatter_view().
 */
function webform_view_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'webform_view_placeholder':
      foreach ($items as $delta => $item) {
        // Don't even insert the placeholder if there is no value in the trigger
        // element.
        if (!empty($item['value'])) {
          $key = $entity_type == 'node' ? $entity->nid : $entity->id;
          $replace_pattern = "[webform_view_" . $key . "_placeholder]";
          $element[$delta] = array(
            '#type' => 'markup',
            '#markup' => $replace_pattern,
          );
        }
        else {
          // Cannot order, return empty string.
          $element[$delta] = array(
            '#type' => 'markup',
            '#markup' => '',
          );
        }
      }
      break;
  }
  return $element;
}


/**
 * Respond to the loading of Webform submissions.
 *
 * Unpack our data so it can be retrieved and displayed in reports.
 *
 * @param $submissions
 *   An array of Webform submissions that are being loaded, keyed by the
 *   submission ID. Modifications to the submissions are done by reference.
 */
function webform_view_webform_submission_load(&$submissions) {
  // Unused - this is too high-level
}

/**
 * Return the result of a component value for display in a table.
 * _webform_table_COMPONENTNAME()
 *
 * The output of this function will be displayed under the "Results" tab then
 * "Table".
 *
 * @param $component
 *   A Webform component array.
 * @param $value
 *   An array of information containing the submission result, directly
 *   correlating to the webform_submitted_data database schema.
 * @return
 *   Textual output formatted for human reading.
 */
function _webform_table_view($component, $raw_value) {
  if (! empty($raw_value)) {
    $structured_value = unserialize(reset($raw_value));
  }
  $output = '';
  // Set the value as a single string.
  // As this may be highly structured, abuse CSV delimiters and cram it all
  // together.
  if (is_array($structured_value)) {
    foreach ($structured_value as $row_id => $row) {
      if (!empty($row)) {
        // Need to flatten arrays maybe
        foreach ($row as $field => $val) {
          if (is_array($val)) {
            $row[$field] = '(' . join('|', $val) . ')';
          }
        }
        $output .= check_plain(join(', ', $row)) . ';<br />';
      }
    }
  }
  else {
    // Should not get here?
    $output = '<pre>' . check_plain(print_r($structured_value, 1)) . '</pre>';
  }
  return $output;
}

/**
 * Implements _webform_display_component().
 * @param $value this has been flattened and serialized - unpack it before use.
 */
function _webform_display_view($component, $value_serialized, $format = 'html') {
  $value = array();
  if (! empty($value_serialized)) {
    $value = unserialize(reset($value_serialized));
  }
  return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#theme' => 'webform_display_view',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#format' => $format,
    #'#options' => _webform_select_options($component, !$component['extra']['aslist']),
    '#value' => (array) $value,
    '#translatable' => array('title', 'options'),
  );
}

